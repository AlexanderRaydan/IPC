////////////////////////////////////////////////////////////////////////////

                              Reflection
                             Workshop - #5

Full Name  : Alexander David Raydan Gonzalez
Student ID#: 124348236
Email      : adraydan-gonzalez@myseneca.ca
Section    : ZBB

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.

///////////////////////////////////////////////////////////////////////////

		 	 	 						
1) With the completion of this workshop, you must have begun to appreciate why code 
formatting is important. Explain how you made your code – especially the iteration 
and selection logic parts – easy to read and maintain.
Mainly, I used Taps to create sections in my code, this way I could see the different
parts of my code easier.

switch (loopType)
        {
        case 'D':
            printf("DO-WHILE: ");
            do
            {
                printf("D");
                index--;
            } while (index > 0);
            break;
            ...

One Tap to put one section inside the switch, one Tap in every 
switch case and another Tab to put another section into the while.					

2)Nested logic is an important feature of programming in any language. 
Identify and briefly discuss the biggest impact on how this workshop 
could be coded if nesting were not possible.

In this workshop, you validate the input value without nested logic, 
if the input is invalid, show an error message and continue to the next iteration. 

With Nested : 

While (while condition) {	

   if (firts input condition)
    {
        if (Second input condition)
            else
            {
                printf error message 2
            }
            ... // next iteration
    } else {

        printf error message 1
    }
    …
}

Without Nested

While (while condition) {	

    if (NOT (condition 1))
        {
            printf("ERROR: To quit, the number of iterations should be 0!\n");
            continue; // next iteration
        }

    if (NOT (condition 2))
        {
            printf("ERROR: Invalid entered value(s)!\n");
            continue; // next iteration
        }
}

Consider the following scenario: you are programming logic that requires a user to 
input a value between 1 and 5, and for each value within that range, you had to perform
something unique. You would have to apply selection to validate the entered values so 
you can implement the given logic for a specific entered range value. Explain why is it 
inefficient to achieve this using a series of “if” optional path constructs instead of 
the preferred “if/else if...” alternative path logic? 

When you use a series of “if”, you are checking every condition in every iteration, 
in this case, you check 5 conditions. However, when you use “if else” path, you check 
the iteration until one of them is true, when that happens, the program does not need 
to check the rest of the validations.				
			
		

